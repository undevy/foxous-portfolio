// src/components/features/company/TransformingCompanyHeader/TransformingCompanyHeader.jsx
import React, { useEffect, useRef, useState } from 'react';
import PropTypes from 'prop-types';
import { companyData } from '../../../../data/companies';
import { projectsByCompany } from '../../../../data/projects';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {string} props.company - ID –∫–æ–º–ø–∞–Ω–∏–∏
 * @param {string} props.activeCase - ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–µ–π—Å–∞
 * @param {Function} props.selectCase - –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–µ–π—Å–∞
 * @param {Function} props.closeSidebar - –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–∞–π–¥–±–∞—Ä–∞
 * @param {Function} props.backToCompanyCard - –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏
 * @param {Function} props.setShowContactModal - –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
 * @param {boolean} props.isTransformed - –§–ª–∞–≥ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * @param {boolean} props.isMobile - –§–ª–∞–≥ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 * @param {string|number} props.maxHeight - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {Function} props.onHeightChange - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã—Å–æ—Ç—ã
 * @returns {JSX.Element} –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É—é—â–µ–≥–æ—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
 */
const TransformingCompanyHeader = ({
  company,
  activeCase,
  selectCase,
  closeSidebar,
  backToCompanyCard,
  setShowContactModal,
  isTransformed,
  isMobile,
  maxHeight,
  onHeightChange
}) => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
  const companyInfo = companyData[company];
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏
  const companyProjects = projectsByCompany[company] || [];

  // Ref –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã –∫–∞—Ä—Ç–æ—á–∫–∏ (–¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
  const cardRef = useRef(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏—è
  const [isDescriptionExpanded, setIsDescriptionExpanded] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
  const getCompanyImage = (companyId) => {
    const imageMap = {
      'gmx': '/assets/images/GMX.webp',
      'nexus': '/assets/images/Nexus.webp',
      'p2p': '/assets/images/KeyApp.webp',
      'wildberries': '/assets/images/Wb.webp'
    };
    
    return imageMap[companyId] || '/api/placeholder/400/250'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
  const toggleDescription = () => {
    setIsDescriptionExpanded(!isDescriptionExpanded);
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ResizeObserver –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã—Å–æ—Ç—ã (–¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
  useEffect(() => {
    if (!cardRef.current || isMobile || !onHeightChange) return;
    
    const observer = new ResizeObserver((entries) => {
      const height = entries[0].contentRect.height;
      onHeightChange(height);
    });
    
    observer.observe(cardRef.current);
    return () => observer.disconnect();
  }, [isMobile, onHeightChange]);

  // –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –≤—ã—Å–æ—Ç—ã –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏
  const contentHeight = maxHeight
    ? `calc(${typeof maxHeight === 'string' ? maxHeight : maxHeight + 'px'} - 280px)`
    : `calc(100vh - 280px)`;

  // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å —Ç–∞–±–∞–º–∏)
  if (isTransformed) {
    return (
      <div 
        className="card-glassmorphism rounded-t-3xl shadow-sm overflow-hidden transform-card-transition"
        style={{ 
          minHeight: '100px', // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
          position: 'relative',
          zIndex: 30,
          marginTop: isMobile ? '-50px' : '0', // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —Å —Ñ—É—Ç–µ—Ä–æ–º –≤ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
          paddingTop: '30px' // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è —Ñ—É—Ç–µ—Ä–æ–º
        }}
      >
        {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å —Ç–∞–±–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ */}
        <div 
          className="overflow-x-auto custom-scrollbar scrollbar-hide pb-4 horizontal-scroll" 
          style={{ 
            WebkitOverflowScrolling: 'touch', 
            paddingTop: '30px', // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è —Ñ—É—Ç–µ—Ä–æ–º
            paddingBottom: '12px' // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
          }}
        >
          <div className="flex space-x-1 px-4 pb-3 min-w-max">
            {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∫–æ–º–ø–∞–Ω–∏–∏" */}
            <button
              onClick={() => {
                backToCompanyCard();
              }}
              className="border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-700 text-black dark:text-white" 
              style={{
                display: 'flex',
                padding: '8px 20px',
                flexDirection: 'row',
                alignItems: 'center',
                gap: '4px',
                borderRadius: '9999px',
                border: '1px solid var(--color-button-border)',
                background: 'transparent',
                fontSize: '14px',
                fontWeight: '400',
                width: 'auto' // –®–∏—Ä–∏–Ω–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
              }}
            >
              ‚¨ÖÔ∏è To {companyInfo.name}
            </button>
            
            {/* –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–∫—Ä–æ–º–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ) */}
            {companyProjects.map((project) => {
              // –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
              if (activeCase === project.id) return null;
              
              return (
                <button
                  key={project.id}
                  onClick={() => {
                    selectCase(project.id);
                  }}
                  className="border-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700 text-black dark:text-white"
                  style={{
                    display: 'flex',
                    padding: '8px 20px',
                    flexDirection: 'row',
                    alignItems: 'center',
                    gap: '4px',
                    borderRadius: '9999px',
                    border: '1px solid var(--color-button-border)',
                    fontSize: '14px',
                    fontWeight: '600',
                    width: 'auto' // –®–∏—Ä–∏–Ω–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                  }}
                >
                  {project.shortName}
                </button>
              );
            })}
            
            {/* –ö–Ω–æ–ø–∫–∞ "Other" */}
            <button
              onClick={() => setShowContactModal(true)}
              className="border-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700 text-black dark:text-white"
              style={{
                display: 'flex',
                padding: '8px 20px',
                flexDirection: 'row',
                alignItems: 'center',
                gap: '4px',
                borderRadius: '9999px',
                border: '1px solid var(--color-button-border)',
                fontSize: '14px',
                fontWeight: '600',
                width: 'auto' // –®–∏—Ä–∏–Ω–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
              }}
            >
              üîç Other
            </button>
          </div>
        </div>
      </div>
    );
  }

  // –ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∏–¥)
  return (
    <div
      ref={cardRef}
      className="card-glassmorphism rounded-3xl shadow-sm relative overflow-hidden transform-card-transition"
      style={{
        height: '100%',
        maxHeight: maxHeight || (isMobile ? 'calc(100vh - 120px)' : 'none'),
        zIndex: isMobile ? 10 : 'auto',
      }}
    >
      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="sticky top-0 z-10 card-glassmorphism-bottom-border p-6 pb-1">
        <button
          onClick={() => {
            closeSidebar();
          }}
          className="absolute top-3 right-3 h-6 w-6 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center z-40"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="12"
            height="12"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className="text-gray-600 dark:text-gray-300"
          >
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>

        <img
          src={getCompanyImage(company)}
          alt={companyInfo.name}
          className="w-full h-auto rounded-xl mb-4"
        />
        <h2 className="text-2xl font-semibold mb-2 text-left text-gray-900 dark:text-white">{companyInfo.name}</h2>
      </div>

      {/* –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º minHeight */}
      <div
        className="p-6 pt-2 overflow-y-auto custom-scrollbar"
        style={{ maxHeight: contentHeight, minHeight: '150px' }}
      >
        {/* –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö */}
        {isMobile ? (
  <div className="relative mb-4">
    <div 
      className={`text-base text-gray-600 dark:text-gray-300 text-left text-clamp text-clamp-transition ${
        isDescriptionExpanded ? 'text-clamp-none' : 'text-clamp-3'
      }`}
    >
      {companyInfo.description}
    </div>
    <button 
      onClick={toggleDescription}
      className="text-primary font-normal text-base mt-1"
    >
      {isDescriptionExpanded ? 'less' : 'more'}
    </button>
  </div>
) : (
  <p className="text-base text-gray-600 dark:text-gray-300 mb-4 text-left">
    {companyInfo.description}
  </p>
)}

<div className="mb-4">
  <h3 className="text-sm font-medium text-black dark:text-white mb-2 text-left">Get a Sneak Peek</h3>
  
  {/* –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */}
  {isMobile ? (
    // –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–∫—Ä–æ–ª–ª–æ–º
    <div 
      className="overflow-x-auto custom-scrollbar scrollbar-hide pb-4 horizontal-scroll" 
      style={{ 
        WebkitOverflowScrolling: 'touch', 
        paddingBottom: '0px' 
      }}
    >
      <div className="flex space-x-1 px-0 min-w-max">
        {companyProjects.map((project) => (
          <button
            key={project.id || project.title}
            onClick={() => selectCase(project.id)}
            className={`${
              activeCase === project.id
                ? 'border-primary-dark bg-primary-light text-black dark:text-white'
                : 'border-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700 text-black dark:text-white'
            }`}
            style={{
              display: 'flex',
              padding: '8px 20px',
              flexDirection: 'row',
              alignItems: 'center',
              gap: '4px',
              borderRadius: '9999px',
              border: activeCase === project.id ? '1px solid #1D4ED8' : '1px solid var(--color-button-border)',
              background: activeCase === project.id ? 'var(--color-primary-light)' : 'transparent',
              fontSize: '14px',
              fontWeight: '600',
              width: 'auto' // –®–∏—Ä–∏–Ω–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            }}
          >
            {project.shortName}
          </button>
        ))}
        <button
          onClick={() => setShowContactModal(true)}
          className="border-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700 text-black dark:text-white"
          style={{
            display: 'flex',
            padding: '8px 20px',
            flexDirection: 'row',
            alignItems: 'center',
            gap: '4px',
            borderRadius: '9999px',
            border: '1px solid var(--color-button-border)',
            fontSize: '14px',
            fontWeight: '600',
            width: 'auto' // –®–∏—Ä–∏–Ω–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
          }}
        >
          üîç Other
        </button>
      </div>
    </div>
  ) : (
    // –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å flex-wrap
    <div className="flex flex-wrap gap-3">
      {companyProjects.map((project) => (
        <button
          key={project.id || project.title}
          onClick={() => selectCase(project.id)}
          className={`${
            activeCase === project.id
              ? 'border-primary-dark bg-primary-light text-black dark:text-white'
              : 'border-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700 text-black dark:text-white'
          }`}
          style={{
            display: 'flex',
            padding: '8px 20px',
            flexDirection: 'row',
            alignItems: 'center',
            gap: '4px',
            borderRadius: '9999px',
            border: activeCase === project.id ? '1px solid #1D4ED8' : '1px solid var(--color-button-border)',
            background: activeCase === project.id ? 'var(--color-primary-light)' : 'transparent',
            fontSize: '14px',
            fontWeight: '600',
            width: 'auto' // –®–∏—Ä–∏–Ω–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
          }}
        >
          {project.shortName}
        </button>
      ))}
      <button
        onClick={() => setShowContactModal(true)}
        className="border-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700 text-black dark:text-white"
        style={{
          display: 'flex',
          padding: '8px 20px',
          flexDirection: 'row',
          alignItems: 'center',
          gap: '4px',
          borderRadius: '9999px',
          border: '1px solid var(--color-button-border)',
          fontSize: '14px',
          fontWeight: '600',
          width: 'auto' // –®–∏—Ä–∏–Ω–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        }}
      >
        üîç Other
      </button>
    </div>
  )}
</div>

        <div className="pt-4 border-t border-gray-100 dark:border-gray-700 flex flex-col space-y-2">
          {company === 'nexus' ? (
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Nexus Network
            <button
              onClick={() => {
                setShowContactModal(true);
              }}
              className="text-sm text-primary hover:text-primary-dark flex items-center"
            >
              <span>Contact about {companyInfo.name}</span>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="ml-1"
              >
                <line x1="7" y1="17" x2="17" y2="7"></line>
                <polyline points="7 7 17 7 17 17"></polyline>
              </svg>
            </button>
          ) : (
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π - –æ–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞
            <a
              href={companyInfo.url}
              target="_blank"
              rel="noopener noreferrer"
              className="text-sm text-primary hover:text-primary-dark flex items-center"
            >
              <span>Visit {companyInfo.name}</span>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="ml-1"
              >
                <line x1="7" y1="17" x2="17" y2="7"></line>
                <polyline points="7 7 17 7 17 17"></polyline>
              </svg>
            </a>
          )}

          {companyInfo.keyAppUrl && (
            <a
              href={companyInfo.keyAppUrl}
              target="_blank"
              rel="noopener noreferrer"
              className="text-sm text-primary hover:text-primary-dark flex items-center"
            >
              <span>Download Key App</span>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="ml-1"
              >
                <line x1="7" y1="17" x2="17" y2="7"></line>
                <polyline points="7 7 17 7 17 17"></polyline>
              </svg>
            </a>
          )}
        </div>
      </div>
    </div>
  );
};

TransformingCompanyHeader.propTypes = {
  company: PropTypes.string.isRequired,
  activeCase: PropTypes.string,
  selectCase: PropTypes.func.isRequired,
  closeSidebar: PropTypes.func.isRequired,
  backToCompanyCard: PropTypes.func.isRequired,
  setShowContactModal: PropTypes.func.isRequired,
  isTransformed: PropTypes.bool.isRequired,
  isMobile: PropTypes.bool.isRequired,
  maxHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  onHeightChange: PropTypes.func
};

// –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
TransformingCompanyHeader.defaultProps = {
  onHeightChange: () => {}
};

export default React.memo(TransformingCompanyHeader);